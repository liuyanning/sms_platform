<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd


        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!--dataSource配置 -->
    <bean id="businessDataSource" class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${business.driver-url}" />
        <property name="username" value="${business.user-name}" />
        <property name="password" value="${business.user-password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${business.init-connection-count}" />
        <property name="minIdle" value="${business.min-connection-count}" />
        <property name="maxActive" value="${business.max-active-count}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${business.maximum-active-time}" />
        <property name="useUnfairLock" value="false"></property>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${business.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="${business.validationQuery}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${business.filters}" />
    </bean>
    
   <!--创建sqlSessionFactory-->  
    <bean id="sqlBusinessSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
          <property name="dataSource" ref="businessDataSource" />
          <property name="configLocation" value="classpath:mybatis-config.xml"></property>
          <property name="mapperLocations" value="classpath*:com/hero/wireless/web/entity/business/**/*Mapper.xml" />
    </bean>   
      <!-- 使用MapperScannerConfigurer自动配置basePackage下面的所有映射器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hero.wireless.web.dao.business" />
        <property name="sqlSessionFactoryBeanName" value="sqlBusinessSessionFactory" />
    </bean>
    
    <bean id="sqlBusinessSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlBusinessSessionFactory"></constructor-arg>
    </bean>
    <!-- Business事务管理 -->
    <bean id="txBusinessManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="businessDataSource" />
    </bean>
    <!-- Business事务管理结束 -->
    
     <!-- 启用基于注解事务的支持 -->
    <tx:annotation-driven transaction-manager="txBusinessManager" />
    
</beans>